package org.opentestsystem.rdw.admin.repository.impl;

import com.google.common.collect.ImmutableMap;
import org.opentestsystem.rdw.admin.common.security.PermissionScope;
import org.opentestsystem.rdw.admin.model.Group;
import org.opentestsystem.rdw.admin.model.GroupQuery;
import org.opentestsystem.rdw.admin.repository.GroupRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Repository;

import javax.validation.constraints.NotNull;
import java.util.List;
import java.util.Map;

import static org.opentestsystem.rdw.admin.common.jdbc.QueryUtils.getSecurityParameters;

@Repository
public class JdbcGroupRepository implements GroupRepository {
    private final NamedParameterJdbcTemplate template;

    @Value("${sql.group.findAllByQuery}")
    private String findAllQuery;

    @Autowired
    JdbcGroupRepository(final NamedParameterJdbcTemplate template) {
        this.template = template;
    }

    @Override
    public List<Group> findAllByQuery(@NotNull final PermissionScope permissionScope, @NotNull final GroupQuery query) {
        return template.query(
                findAllQuery,
                new MapSqlParameterSource()
                        .addValues(getSecurityParameters(permissionScope))
                        .addValues(getQueryParameters(query)),
                (row, index) -> Group.builder()
                        .name(row.getString("group_name"))
                        .schoolName(row.getString("school_name"))
                        .schoolYear(row.getInt("school_year"))
                        .subject(row.getString("subject_code"))
                        .build()
        );
    }

    private static Map<String, Object> getQueryParameters(final GroupQuery query) {
        return ImmutableMap.<String, Object>builder()
                .put("school_id", query.getSchoolId())
                .put("subject_ids", query.getSubjectIds())
                .put("school_year", query.getSchoolYear())
                .build();
    }
}
