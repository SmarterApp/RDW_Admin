package org.opentestsystem.rdw.admin.service.impl;

import com.google.common.collect.ImmutableSet;
import org.opentestsystem.rdw.admin.model.Group;
import org.opentestsystem.rdw.admin.model.GroupFilterOptions;
import org.opentestsystem.rdw.admin.model.GroupQuery;
import org.opentestsystem.rdw.admin.repository.GroupRepository;
import org.opentestsystem.rdw.admin.security.User;
import org.opentestsystem.rdw.admin.service.GroupService;
import org.opentestsystem.rdw.admin.service.SchoolService;
import org.opentestsystem.rdw.common.model.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Set;

@Service
class DefaultGroupService implements GroupService {
    private static final Set<Subject> SUBJECTS = ImmutableSet.copyOf(Subject.class.getEnumConstants());

    private final GroupRepository repository;
    private final SchoolService schoolService;

    @Autowired
    DefaultGroupService(final GroupRepository repository, final SchoolService schoolService) {
        this.repository = repository;
        this.schoolService = schoolService;
    }

    @Override
    public Set<Group> getByQuery(final User user, final GroupQuery query) {
        return ImmutableSet.copyOf(repository.findAllByQuery(user.getPermissionsById().get("GROUP_READ").getScope(), query));
    }

    @Override
    public GroupFilterOptions getFilterOptions(final User user) {
        return GroupFilterOptions
                .builder()
                .schools(schoolService.getSchools(user))
                .subjects(SUBJECTS)
                .schoolYears(ImmutableSet
                        .copyOf(repository
                                .findAllDistinctSchoolYears(user
                                        .getPermissionsById()
                                        .get("GROUP_READ")
                                        .getScope())))
                .build();
    }

    @Override
    public void update(final User user, final Group group) {
        repository.update(user.getPermissionsById().get("GROUP_WRITE").getScope(), group);
    }
}
