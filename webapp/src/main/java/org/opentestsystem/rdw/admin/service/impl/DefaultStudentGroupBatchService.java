package org.opentestsystem.rdw.admin.service.impl;

import com.amazonaws.services.s3.Headers;
import com.google.common.base.Charsets;
import org.apache.commons.codec.binary.Hex;
import org.apache.commons.codec.digest.DigestUtils;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.opentestsystem.rdw.admin.common.security.PermissionScope;
import org.opentestsystem.rdw.admin.model.CsvValidationFailure;
import org.opentestsystem.rdw.admin.model.ImportStatus;
import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.admin.repository.StudentGroupBatchRepository;
import org.opentestsystem.rdw.admin.security.User;
import org.opentestsystem.rdw.admin.service.CsvValidationService;
import org.opentestsystem.rdw.admin.service.GroupsSource;
import org.opentestsystem.rdw.admin.service.LocationStrategy;
import org.opentestsystem.rdw.admin.service.StudentGroupBatchService;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.stream.annotation.EnableBinding;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;

@Service
@EnableBinding(Source.class)
class DefaultStudentGroupBatchService implements StudentGroupBatchService {
    private static final Logger logger = LoggerFactory.getLogger(DefaultStudentGroupBatchService.class);

    private final StudentGroupBatchRepository repository;
    private final ArchiveService archiveService;
    private final CsvValidationService validationService;
    private final GroupsSource source;

    @Autowired
    public DefaultStudentGroupBatchService(final StudentGroupBatchRepository repository,
                                           final ArchiveService archiveService,
                                           final CsvValidationService validationService,
                                           final GroupsSource source) {
        this.repository = repository;
        this.archiveService = archiveService;
        this.validationService = validationService;
        this.source = source;
    }

    @Override
    public Iterable<StudentGroupBatch> findAllStudentGroupBatches(final User user) {
        return repository.findByCreator(user.getUsername());
    }

    @Override
    public StudentGroupBatch upload(final User user, final MultipartFile file) {
        logger.debug("Processing upload request: {}", file.getOriginalFilename());

        final PermissionScope permissionScope = user
                .getPermissionsById()
                .get("GROUP_WRITE")
                .getScope();

        final StudentGroupBatch.Builder studentGroupBatchBuilder = StudentGroupBatch.builder()
                .creator(user.getUsername());

        final MessageDigest messageDigest = DigestUtils.getMd5Digest();
        final List<CsvValidationFailure> validationFailures = new ArrayList<>();
        try {
            try (final DigestInputStream digestStream = new DigestInputStream(file.getInputStream(), messageDigest)) {
                validationFailures.addAll(validate(digestStream, permissionScope));
            }

            final String digest = Hex.encodeHexString(messageDigest.digest()).toUpperCase();
            if (!validationFailures.isEmpty()) {
                studentGroupBatchBuilder
                        .digest(digest)
                        .message(validationService.toMessage(validationFailures))
                        .status(ImportStatus.BAD_DATA);
                logger.debug("Request failed validation: {}", file.getOriginalFilename());
                return repository.create(studentGroupBatchBuilder.build());
            }

            logger.debug("Validated request: {}", file.getOriginalFilename());
            archiveFile(file, digest, user);

            studentGroupBatchBuilder
                    .digest(digest)
                    .status(ImportStatus.ACCEPTED);

            final StudentGroupBatch sgbImport = repository.create(studentGroupBatchBuilder.build());

            //Yes, I know. This is just temporary.
            source.send("{\"data\":\"this is data for now\"}".getBytes("UTF-8"), digest,
                    MediaType.APPLICATION_JSON.toString(), sgbImport.getId());

            return sgbImport;

        } catch (final Exception ex) {
            logger.warn("Upload request failed with exception: {}", file.getOriginalFilename(), ex);
            studentGroupBatchBuilder
                    .digest(Hex.encodeHexString(messageDigest.digest()).toUpperCase())
                    .message("Exception processing upload: " + ex.getMessage())
                    .status(ImportStatus.BAD_DATA);
            return repository.create(studentGroupBatchBuilder.build());
        }
    }

    private void archiveFile(final MultipartFile file,
                             final String digest,
                             final User user) throws IOException {
        try (final InputStream fileStream = file.getInputStream()) {
            final String location = new LocationStrategy.GroupUploadContentLocationStrategy().location(digest);

            //Check if file already exists in ArchiveService
            if (archiveService.exists(location)) {
                logger.debug("Upload already exists in S3: {}", file.getOriginalFilename());
                return;
            }

            final Properties properties = new Properties();
            properties.put(Headers.CONTENT_TYPE, file.getContentType());
            properties.put(Headers.CONTENT_LENGTH, file.getSize());
            properties.setProperty("username", user.getUsername());
            properties.setProperty("filename", file.getOriginalFilename());
            archiveService.writeResource(location, fileStream, properties);

            logger.debug("Uploaded request: {}", file.getOriginalFilename());
        }
    }

    /**
     * Chunk the uploaded payload by school id. Perform basic validation.
     *
     * @param inputStream       The uploaded payload
     * @param permissionScope   The user permissions
     * @return Any validation failures
     */
    private List<CsvValidationFailure> validate(final InputStream inputStream, final PermissionScope permissionScope) throws IOException {
        final List<CsvValidationFailure> validationFailures = new ArrayList<>();

        try (final Reader reader = new InputStreamReader(inputStream, Charsets.UTF_8)) {
            final CSVParser parser = CSVFormat.RFC4180
                    .withFirstRecordAsHeader()
                    .withIgnoreHeaderCase()
                    .parse(reader);

            final Iterator<CSVRecord> recordIterator = parser.iterator();
            if (!recordIterator.hasNext()) {
                validationFailures.add(CsvValidationFailure.builder()
                        .row(0)
                        .message("Empty file")
                        .build());
                return validationFailures;
            }

            validationFailures.addAll(validationService.validateHeaders(parser.getHeaderMap().keySet()));

            validationFailures.addAll(validationService.validateRecords(recordIterator, permissionScope));

        } catch (final IOException ex) {
            validationFailures.add(CsvValidationFailure.builder()
                    .row(0)
                    .message("Error reading file [" + ex.getMessage() + "]")
                    .build());
        }

        return validationFailures;
    }

}
