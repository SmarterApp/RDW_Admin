package org.opentestsystem.rdw.admin.web;

import org.apache.commons.codec.digest.DigestUtils;
import org.opentestsystem.rdw.admin.service.AdminService;
import org.opentestsystem.rdw.admin.service.LocationStrategy;
import org.opentestsystem.rdw.admin.model.WarehouseImport;
import org.opentestsystem.rdw.admin.security.User;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.util.List;
import java.util.Properties;

@RestController
class AdminController {

    private final Logger logger = LoggerFactory.getLogger(getClass());
    private final AdminService adminService;
    private final ArchiveService archiveService;

    @Autowired
    public AdminController(final AdminService service,
                           final ArchiveService archiveService) {
        this.adminService = service;
        this.archiveService = archiveService;
    }

    @GetMapping("/api/warehouseImports")
    public List<WarehouseImport> getWarehouseImports() {
        return adminService.getWarehouseImports();
    }

    @PostMapping("/api/studentGroups")
    @ResponseStatus(value = HttpStatus.ACCEPTED)
    public void postStudentGroups(@AuthenticationPrincipal final User user,
                                  @RequestParam("file") MultipartFile file) {

        try {
            final String digest = DigestUtils.md5Hex(file.getBytes()).toUpperCase();
            final Properties properties = new Properties();
            properties.setProperty("content-type", file.getContentType());
            properties.setProperty("username", user.getUsername());
            properties.setProperty("size", Long.toString(file.getSize()));

            String location = new LocationStrategy.GroupUploadContentLocationStrategy().location(digest);

            archiveService.writeResource(location, file.getInputStream(), properties);

        } catch (IOException e) {
            final String msg = "Error reading bytes to create digest for file" + file.getName();
            logger.warn(msg, e);
            throw new RuntimeException(msg, e);
        }

    }

}
