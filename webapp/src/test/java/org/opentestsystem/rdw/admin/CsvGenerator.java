package org.opentestsystem.rdw.admin;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.google.common.collect.Lists.newArrayList;
import static org.opentestsystem.rdw.admin.service.impl.DefaultCsvValidationService.HeaderGroup;
import static org.opentestsystem.rdw.admin.service.impl.DefaultCsvValidationService.HeaderSSID;
import static org.opentestsystem.rdw.admin.service.impl.DefaultCsvValidationService.HeaderSchool;
import static org.opentestsystem.rdw.admin.service.impl.DefaultCsvValidationService.HeaderSubject;
import static org.opentestsystem.rdw.admin.service.impl.DefaultCsvValidationService.HeaderUser;
import static org.opentestsystem.rdw.admin.service.impl.DefaultCsvValidationService.HeaderYear;
import static org.opentestsystem.rdw.admin.service.impl.DefaultCsvValidationService.RequiredHeaders;

/**
 * This testing utility class can be used to generate arbitrarily-large CSV sample files.
 * Replace the school ids list with valid values from your local database.
 */
public class CsvGenerator {
    private static final Logger logger = LoggerFactory.getLogger(CsvGenerator.class);

    private static final int NumGroupsPerSchool = 4500; //4500
    private static final int NumStudentsPerGroup = 30;
    private static final String output = "file:///tmp/output.csv";
    private static final List<String> SchoolIds = newArrayList(
            "aefa599e5edc4e8fb9c516224a8a37",
            "8f7097f6dc8f4067af4bb1260ef0b0",
            "495316f47b524f728ab280491e7f42",
            "3461a7012fe54bd3a197eb0d2c462f",
            "0cf31b8fe2f84a34bdc4331b35906e"
    );

    private static final List<String> OrderedHeaders = newArrayList(RequiredHeaders);
    private static final String GroupPrefix = "Group_";

    public static void main(final String[] args) throws Exception {

        final URI uri = URI.create(output);
        final File file = new File(uri);
        file.createNewFile();

        final CSVFormat format = CSVFormat.DEFAULT
                .withFirstRecordAsHeader()
                .withSkipHeaderRecord(false)
                .withHeader(OrderedHeaders.toArray(new String[OrderedHeaders.size()]));
        final Map<String, String> recordValues = new HashMap<>();
        recordValues.put(HeaderYear, "2017");

        try (final CSVPrinter printer = new CSVPrinter(new FileWriter(file), format)) {

            for (final String schoolId : SchoolIds) {
                logger.info("Starting school: {}", schoolId);
                recordValues.put(HeaderSchool, schoolId);

                int groupCount = NumGroupsPerSchool;
                while (groupCount >= 0) {
                    final String groupId = GroupPrefix + groupCount--;
                    recordValues.put(HeaderGroup, groupId);

                    //add subject row
                    recordValues.put(HeaderSubject, "ELA");
                    printRow(printer, recordValues);
                    recordValues.remove(HeaderSubject);

                    //add teacher row
                    recordValues.put(HeaderUser, "teacher@somewhere.com");
                    printRow(printer, recordValues);
                    recordValues.remove(HeaderUser);

                    //add students
                    int studentCount = NumStudentsPerGroup;
                    while (studentCount >= 0) {
                        recordValues.put(HeaderSSID, schoolId + groupId + "_" + studentCount--);
                        printRow(printer, recordValues);
                    }
                    recordValues.remove(HeaderSSID);
                }
            }
        }
    }

    private static void printRow(final CSVPrinter printer, final Map<String, String> row) throws IOException {
        final List<String> values = new ArrayList<>(OrderedHeaders.size());
        for (final String header : OrderedHeaders) {
            values.add(row.get(header));
        }
        printer.printRecord(values);
    }

}
