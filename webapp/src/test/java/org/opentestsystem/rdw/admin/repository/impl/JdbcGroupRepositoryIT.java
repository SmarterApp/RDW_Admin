package org.opentestsystem.rdw.admin.repository.impl;

import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.Group;
import org.opentestsystem.rdw.admin.model.GroupQuery;
import org.opentestsystem.rdw.admin.repository.RepositoryIT;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.List;

import static org.opentestsystem.rdw.admin.common.test.support.PermissionScopes.districts;
import static org.opentestsystem.rdw.admin.common.test.support.PermissionScopes.schools;
import static org.opentestsystem.rdw.admin.common.test.support.PermissionScopes.statewide;
import static org.assertj.core.api.Assertions.assertThat;


@RunWith(SpringRunner.class)
@RepositoryIT
@ContextConfiguration(classes = {JdbcGroupRepository.class})
@Sql(scripts = {"classpath:integration-test-data.sql"})
@ActiveProfiles("test")
public class JdbcGroupRepositoryIT {

    @Autowired
    JdbcGroupRepository repository;

    @Test
    public void itShouldFindByQuery() {
        GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjectIds(ImmutableSet.of(1))
                .build();

        List<Group> actual = repository.findAllByQuery(statewide(), query);

        assertThat(actual).hasSize(2);
    }

    @Test
    public void itShouldFindWhenSubjectIdIsNull() {
        GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjectIds(ImmutableSet.of(2))
                .build();

        List<Group> actual = repository.findAllByQuery(statewide(), query);

        assertThat(actual).hasSize(1);
    }

    @Test
    public void itShouldNotFindWhenSchoolNotInDistrictPermissionScope() {
        GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjectIds(ImmutableSet.of(1))
                .build();

        List<Group> actual = repository.findAllByQuery(districts(-20L), query);

        assertThat(actual).hasSize(0);
    }

    @Test
    public void itShouldNotFindWhenSchoolNotInSchoolPermissionScope() {
        GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjectIds(ImmutableSet.of(1))
                .build();

        List<Group> actual = repository.findAllByQuery(schools(-20L), query);

        assertThat(actual).hasSize(0);
    }

    @Test
    public void itShouldPopulateGroupWhenFound() {
        GroupQuery query = GroupQuery.builder()
                .schoolId(-10)
                .schoolYear(2017)
                .subjectIds(ImmutableSet.of(1))
                .build();

        List<Group> actual = repository.findAllByQuery(statewide(), query);

        assertThat(actual).hasSize(2);

        assertThat(actual.get(0))
                .isEqualToComparingFieldByFieldRecursively(
                        Group.builder()
                                .name("group1")
                                .schoolName("school1")
                                .subject("Math")
                                .schoolYear(2017)
                                .build());
        assertThat(actual.get(1))
                .isEqualToComparingFieldByField(
                        Group.builder()
                                .name("group2")
                                .schoolName("school1")
                                .schoolYear(2017)
                                .build()
                );
    }
}
