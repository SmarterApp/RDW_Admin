package org.opentestsystem.rdw.admin.service.impl;


import com.google.common.collect.ImmutableSet;
import org.apache.commons.codec.digest.DigestUtils;
import org.junit.Before;
import org.junit.Test;
import org.opentestsystem.rdw.admin.model.ImportStatus;
import org.opentestsystem.rdw.admin.model.StudentGroupBatch;
import org.opentestsystem.rdw.admin.repository.StudentGroupBatchRepository;
import org.opentestsystem.rdw.admin.security.User;
import org.opentestsystem.rdw.admin.service.GroupsSource;
import org.opentestsystem.rdw.archive.ArchiveService;
import org.springframework.cloud.stream.messaging.Source;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class DefaultStudentGroupBatchServiceTest {

    private StudentGroupBatchRepository repository;
    private ArchiveService archiveService;
    private DefaultStudentGroupBatchService service;
    private MultipartFile file;
    private GroupsSource source;

    private User user = User.builder()
            .id("user")
            .username("test")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Before
    public void before() {
        repository = mock(StudentGroupBatchRepository.class);
        archiveService = mock(ArchiveService.class);
        source = mock(GroupsSource.class);
        service = new DefaultStudentGroupBatchService(repository, archiveService, source);

        file = mock(MultipartFile.class);
        when(file.getName()).thenReturn("file name");
        when(file.getSize()).thenReturn(150L);
        when(file.getContentType()).thenReturn("csv");
        when(repository.create(any(StudentGroupBatch.class))).thenAnswer(invocation -> invocation.getArguments()[0]);
    }

    @Test
    public void itShouldUseRepositoryToFindAllStudentGroupBatches() throws IOException {
        final Iterable studentGroupBatches = mock(Iterable.class);
        when(repository.findByCreator("test")).thenReturn(studentGroupBatches);

        assertThat(service.findAllStudentGroupBatches(user)).isEqualTo(studentGroupBatches);
    }

    @Test
    public void itShouldUpload() throws IOException {
        when(file.getBytes()).thenReturn(("school_natural_id,subject_code,group_name,group_user_login,school_year,student_ssid\nschool_natural_id_val,subject_code_val,group_name_val,group_user_login_val,school_year_val,student_ssid_val\n").getBytes());
        final StudentGroupBatch batch = StudentGroupBatch.builder()
                .creator(user.getUsername())
                .status(ImportStatus.ACCEPTED)
                .digest(DigestUtils.md5Hex(file.getBytes())
                        .toUpperCase())
                .build();
        assertThat(service.upload(user, file)).isEqualTo(batch);
    }

    @Test
    public void itShouldNotUploadIfColumnHeadersAreMissing() throws IOException {
        when(file.getBytes()).thenReturn(("school_natural_id,subject_code,group_user_login,school_year,student_ssid\nschool_natural_id_val,subject_code_val,group_name_val,group_user_login_val,school_year_val,student_ssid_val\n").getBytes());

        final StudentGroupBatch batch = StudentGroupBatch.builder()
                .creator(user.getUsername())
                .status(ImportStatus.BAD_DATA)
                .digest("")
                .message("Missing headers, found [subject_code, group_user_login, school_natural_id, school_year, student_ssid]")
                .build();
        assertThat(service.upload(user, file)).isEqualTo(batch);
    }

    @Test
    public void itShouldNotUploadEmptyFile() throws IOException {
        when(file.getBytes()).thenReturn("".getBytes());

        final StudentGroupBatch batch = StudentGroupBatch.builder()
                .creator(user.getUsername())
                .status(ImportStatus.BAD_DATA)
                .digest("")
                .message("Empty file")
                .build();
        assertThat(service.upload(user, file)).isEqualTo(batch);
    }

    @Test
    public void itShouldNotUploadIfFailedToReadTheFile() throws IOException {
        when(file.getBytes()).thenThrow(new RuntimeException("failed"));

        final StudentGroupBatch batch = StudentGroupBatch.builder()
                .creator(user.getUsername())
                .status(ImportStatus.BAD_DATA)
                .digest("")
                .message("failed")
                .build();
        assertThat(service.upload(user, file)).isEqualTo(batch);
    }
}