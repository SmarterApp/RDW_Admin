package org.opentestsystem.rdw.admin.web;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.opentestsystem.rdw.admin.model.Group;
import org.opentestsystem.rdw.admin.model.GroupQuery;
import org.opentestsystem.rdw.admin.security.User;
import org.opentestsystem.rdw.admin.service.GroupService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.Matchers.any;
import static org.mockito.Matchers.refEq;
import static org.mockito.Mockito.when;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@WebMvcTest(GroupController.class)
public class GroupControllerIT {
    @Autowired
    private MockMvc mvc;

    @MockBean
    private GroupService service;

    private User user = User.builder()
            .id("user")
            .authorities(ImmutableSet.of(new SimpleGrantedAuthority("ROLE_USER")))
            .build();

    @Test
    public void itShouldGetSchoolsBySingleSubjectId() throws Exception {
        when(service.getByQuery(any(User.class), refEq(
                GroupQuery
                        .builder()
                        .schoolId(1)
                        .schoolYear(2017)
                        .subjectIds(ImmutableSet.of(1))
                        .build()))
        ).thenReturn(ImmutableList.of(
                Group.builder()
                        .name("test1")
                        .schoolName("school1")
                        .subject("ELA")
                        .build()));

        mvc.perform(get("/api/groups?schoolId=1&subjectId=1&schoolYear=2017")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("test1"))
                .andExpect(jsonPath("$[0].schoolName").value("school1"))
                .andExpect(jsonPath("$[0].subject").value("ELA"));
    }

    @Test
    public void itShouldGetSchoolsByMultipleSubjectIds() throws Exception {
        when(service.getByQuery(any(User.class), refEq(
                GroupQuery
                        .builder()
                        .schoolId(1)
                        .schoolYear(2017)
                        .subjectIds(ImmutableSet.of(1, 2))
                        .build()))
        ).thenReturn(ImmutableList.of(Group.builder()
                .name("test1")
                .schoolName("school1")
                .subject("ELA")
                .build()));

        mvc.perform(get("/api/groups?schoolId=1&subjectId=1&subjectId=2&schoolYear=2017")
                .with(user(user)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("test1"))
                .andExpect(jsonPath("$[0].schoolName").value("school1"))
                .andExpect(jsonPath("$[0].subject").value("ELA"));
    }
}
